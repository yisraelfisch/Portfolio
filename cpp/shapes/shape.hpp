/*********************************
 * Reviewer: 
 * Author: enymorphs			
 * File: shape.hpp
 * ******************************/

#pragma once
#include "point.hpp"
#include "glut_utils.h"

namespace ilrd
{

class Shape
{
protected:
    explicit Shape(const Point& pos = Point(), double angle = 0, int color = COLOR_WHITE);           //CTOR
    virtual ~Shape(){} // virtual Dtor

public:
    /* CCtor and operator= to be generated by the compiler */
    void Move(const Point& pos);
    void Rotate(const double angle);
    void Step(const Point& step);
    void Revolve(const Point& pivot, double angle);
    void Draw(const Point &origin);
    inline const Point& GetPosition() const { return m_pos; }
    inline double GetAngle() const { return m_angle; }
    inline const int& GetColor() const {return m_color;}
    //Point& getPosition() const; another way to access m_pos
    //you can also put m_pos under protected


private:
    virtual void DrawImp(const Point & pos) = 0; // pure virtual
    Point m_pos;
    double m_angle;
    int m_color;
};// Class shape

} // namespace ilrd