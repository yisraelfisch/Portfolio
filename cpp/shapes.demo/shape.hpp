/*********************************
 * Reviewer: 
 * Author: enymorphs			
 * File: shape.hpp
 * ******************************/

#pragma once
#include "point.hpp"

namespace ilrd
{

class Shape
{
protected:
    explicit Shape(const Point& pos = Point(), double angle = 0);           //CTOR
    virtual ~Shape(){} // virtual Dtor

public:
    /* CCtor and operator= to be generated by the compiler */
    void Move(const Point& pos);
    void Rotate(const double angle);
    void Step(const Point& step);
    void Revolve(const Point& pivot, double angle);
    virtual void Draw() = 0; // pure virtual


private:
    Point m_pos;
    double m_angle;
};// Class shape

} // namespace ilrd